{
    "Model": "Resnet18v1",
    "Model_Size_Trainable": 11182538,
    "Model_Size_Total": 11182538,
    "Batch_Size": 128,
    "weight_init": "Default",
    "total_epoch": 300,
    "device": "cuda",
    "train_transform": [
        "RandomCrop(size=(32, 32), padding=4)",
        "RandomHorizontalFlip(p=0.5)",
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "test_transform": [
        "ToTensor()",
        "Normalize(mean=(0.5, 0.5, 0.5), std=(0.1, 0.1, 0.1))"
    ],
    "Model Structure": [
        "(conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)",
        "(bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "(relu): ReLU(inplace=True)",
        "(maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)",
        "(conv2_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv3_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv4_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(conv5_x): Sequential(",
        "  (0): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "    (downsample): Sequential(",
        "      (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2))",
        "      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    )",
        "  )",
        "  (1): ResNetv1_BasicBlock(",
        "    (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu1): ReLU(inplace=True)",
        "    (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)",
        "    (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)",
        "    (relu2): ReLU(inplace=True)",
        "  )",
        ")",
        "(avgPool): AdaptiveAvgPool2d(output_size=(1, 1))",
        "(fc): Linear(in_features=512, out_features=10, bias=True)"
    ],
    "Loss Function": "CrossEntropyLoss",
    "Optimizer": {
        "Type": "SGD",
        "State": {},
        "param_groups": {
            "lr": 0.1,
            "momentum": 0.9,
            "dampening": 0,
            "weight_decay": 0.0005,
            "nesterov": false,
            "initial_lr": 0.1,
            "params": [
                140630786333144,
                140630786333288,
                140630786333360,
                140630786333936,
                140630786334152,
                140630786334224,
                140630786334584,
                140630786265232,
                140630786265304,
                140630873912160,
                140630786331344,
                140630786331200,
                140630786265664,
                140630786265880,
                140630786265952,
                140630786267176,
                140630786267392,
                140630786267464,
                140630786267824,
                140630786268040,
                140630786268112,
                140630786266312,
                140630786266384,
                140630786266528,
                140630786266672,
                140630786268544,
                140630786268760,
                140630786268832,
                140630786347080,
                140630786347296,
                140630786347368,
                140630786348592,
                140630786348808,
                140630786348880,
                140630786349240,
                140630786349456,
                140630786349528,
                140630786347728,
                140630786347800,
                140630786347944,
                140630786348088,
                140630786349960,
                140630786350176,
                140630786350248,
                140630786350608,
                140630786350824,
                140630786350896,
                140630785848376,
                140630785848592,
                140630785848664,
                140630785849024,
                140630785849240,
                140630785849312,
                140630785847512,
                140630785847584,
                140630785847728,
                140630785847872,
                140630785849744,
                140630785849960,
                140630785850032,
                140630785850392,
                140630785850608,
                140630785850680,
                140630785851040,
                140630785851112
            ]
        }
    },
    "lr_Scheduler": {
        "Type": "MultiStepLR",
        "State": {
            "milestones": {
                "100": 1,
                "200": 1
            },
            "gamma": 0.1,
            "base_lrs": [
                0.1
            ],
            "last_epoch": 0,
            "_step_count": 1,
            "_get_lr_called_within_step": false,
            "_last_lr": [
                0.1
            ]
        }
    },
    "Dataset": "CIFAR10",
    "TrainingTime": "3:22:26.134954",
    "InferenceTime": "0:00:01.676096",
    "Performance": {
        "Best_Train": 99.998,
        "Final_Train": 99.992,
        "Best_Test": 92.64,
        "Final_Test": 92.42,
        "Best_Loss": 750.3451071977615,
        "Final_Loss": 0.8903244137763977
    },
    "Class Performance": {
        "plane": 93.4,
        "car": 96.3,
        "bird": 90.9,
        "cat": 81.7,
        "deer": 93.6,
        "dog": 85.9,
        "frog": 96,
        "horse": 95.9,
        "ship": 95.3,
        "truck": 95.2
    },
    "Confusion Matrix": {
        "plane": [
            934,
            6,
            13,
            13,
            2,
            1,
            2,
            1,
            21,
            7
        ],
        "car": [
            4,
            963,
            1,
            0,
            0,
            2,
            0,
            0,
            3,
            27
        ],
        "bird": [
            19,
            1,
            909,
            12,
            20,
            13,
            14,
            8,
            2,
            2
        ],
        "cat": [
            8,
            2,
            32,
            817,
            20,
            83,
            18,
            7,
            6,
            7
        ],
        "deer": [
            6,
            0,
            11,
            18,
            936,
            6,
            7,
            14,
            1,
            1
        ],
        "dog": [
            4,
            2,
            14,
            78,
            16,
            859,
            10,
            14,
            2,
            1
        ],
        "frog": [
            5,
            0,
            15,
            11,
            7,
            0,
            960,
            0,
            0,
            2
        ],
        "horse": [
            4,
            1,
            5,
            8,
            9,
            13,
            0,
            959,
            0,
            1
        ],
        "ship": [
            21,
            6,
            4,
            5,
            0,
            2,
            1,
            0,
            953,
            8
        ],
        "truck": [
            8,
            25,
            2,
            2,
            0,
            1,
            1,
            1,
            8,
            952
        ]
    }
}